// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15],out=ainstruction);
	Mux16(a=aout,b=inM,sel=instruction[12],out=yout);	
	ALU(x=dout,y=yout,zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out=calcout, zr=zr, ng=ng);	
	Mux16(a=instruction,b=calcout, sel=instruction[15], out=ain);//A-instruction load data
	Or(a=ainstruction, b=instruction[5],out=loada);
	ARegister(in=ain, load=loada,out=aout);//Register A
	And(a=instruction[15], b=instruction[4], out=loadd);
	DRegister(in=calcout, load=loadd, out=dout);//Register D
	And(a=instruction[15], b=instruction[3], out=selectoutm);
	Mux16(a=false, b=calcout, sel=selectoutm, out=outM);//Memery[A]
	And(a=instruction[15], b=instruction[3],out=writeM);
	And16(a=true,b=aout, out[0..14]=addressM);
	And(a=ng,b=instruction[2],out=j1);
	And(a=zr,b=instruction[1],out=j2);
	Not(in=ng,out=nng);
	Not(in=zr,out=nzr);
	And(a=nng,b=nzr, out=ge);
	And(a=ge,b=instruction[0],out=j3);
	Or(a=j1,b=j2,out=j12);
	Or(a=j12,b=j3,out=j123);
	And(a=instruction[15],b=j123, out=jmp);
	PC(in=aout,load=jmp,reset=reset,inc=true,out[0..14]=pc);
}
